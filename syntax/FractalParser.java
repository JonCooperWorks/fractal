
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Nov 22 01:03:46 EST 2013
//----------------------------------------------------

package fractal.syntax;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import fractal.values.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Nov 22 01:03:46 EST 2013
  */
public class FractalParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public FractalParser() {super();}

  /** Constructor which sets the default scanner. */
  public FractalParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public FractalParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\034\002\000\002\004\005\000\002\004\003\000" +
    "\002\035\002\000\002\004\005\000\002\004\003\000\002" +
    "\017\003\000\002\016\003\000\002\020\004\000\002\025" +
    "\011\000\002\025\004\000\002\021\004\000\002\005\005" +
    "\000\002\015\005\000\002\007\004\000\002\007\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\014\003\000\002\011\005\000" +
    "\002\011\005\000\002\011\003\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\005" +
    "\000\002\022\006\000\002\023\006\000\002\024\006\000" +
    "\002\032\006\000\002\031\006\000\002\026\005\000\002" +
    "\027\005\000\002\030\005\000\002\033\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\034\004\022\005\041\006\020\007\024\010" +
    "\007\011\010\012\037\015\021\016\027\020\030\021\006" +
    "\023\004\024\023\001\002\000\004\025\145\001\002\000" +
    "\044\002\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4" +
    "\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\020" +
    "\uffe4\021\uffe4\023\uffe4\024\uffe4\051\uffe4\001\002\000\044" +
    "\002\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011" +
    "\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\020\ufff4" +
    "\021\ufff4\023\ufff4\024\ufff4\051\ufff4\001\002\000\004\025" +
    "\143\001\002\000\004\025\141\001\002\000\044\002\ufffd" +
    "\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012" +
    "\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\020\ufffd\021\ufffd" +
    "\023\ufffd\024\ufffd\051\ufffd\001\002\000\044\002\uffe5\004" +
    "\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5" +
    "\013\uffe5\014\uffe5\015\uffe5\016\uffe5\020\uffe5\021\uffe5\023" +
    "\uffe5\024\uffe5\051\uffe5\001\002\000\044\002\uffe7\004\uffe7" +
    "\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013" +
    "\uffe7\014\uffe7\015\uffe7\016\uffe7\020\uffe7\021\uffe7\023\uffe7" +
    "\024\uffe7\051\uffe7\001\002\000\044\002\uffe6\004\uffe6\005" +
    "\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6" +
    "\014\uffe6\015\uffe6\016\uffe6\020\uffe6\021\uffe6\023\uffe6\024" +
    "\uffe6\051\uffe6\001\002\000\004\002\140\001\002\000\004" +
    "\017\ufff8\001\002\000\044\002\uffe9\004\uffe9\005\uffe9\006" +
    "\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9" +
    "\015\uffe9\016\uffe9\020\uffe9\021\uffe9\023\uffe9\024\uffe9\051" +
    "\uffe9\001\002\000\004\025\131\001\002\000\006\030\122" +
    "\051\123\001\002\000\004\025\117\001\002\000\004\025" +
    "\115\001\002\000\004\025\112\001\002\000\044\002\ufff6" +
    "\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012" +
    "\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\020\ufff6\021\ufff6" +
    "\023\ufff6\024\ufff6\051\ufff6\001\002\000\044\002\uffe8\004" +
    "\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8" +
    "\013\uffe8\014\uffe8\015\uffe8\016\uffe8\020\uffe8\021\uffe8\023" +
    "\uffe8\024\uffe8\051\uffe8\001\002\000\012\025\050\047\043" +
    "\050\045\051\051\001\002\000\004\051\107\001\002\000" +
    "\044\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9" +
    "\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\020" +
    "\ufff9\021\ufff9\023\ufff9\024\ufff9\051\ufff9\001\002\000\044" +
    "\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011" +
    "\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\020\uffeb" +
    "\021\uffeb\023\uffeb\024\uffeb\051\uffeb\001\002\000\044\002" +
    "\uffea\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea" +
    "\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea\020\uffea\021" +
    "\uffea\023\uffea\024\uffea\051\uffea\001\002\000\044\002\ufffc" +
    "\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012" +
    "\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\020\ufffc\021\ufffc" +
    "\023\ufffc\024\ufffc\051\ufffc\001\002\000\004\022\ufffb\001" +
    "\002\000\036\002\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe" +
    "\010\ufffe\011\ufffe\012\ufffe\015\ufffe\016\ufffe\020\ufffe\021" +
    "\ufffe\023\ufffe\024\ufffe\001\002\000\040\004\022\005\041" +
    "\006\020\007\024\010\007\011\010\012\037\014\075\015" +
    "\021\016\027\020\030\021\006\023\004\024\023\051\072" +
    "\001\002\000\036\002\001\004\022\005\041\006\020\007" +
    "\024\010\007\011\010\012\037\015\021\016\027\020\030" +
    "\021\006\023\004\024\023\001\002\000\004\025\042\001" +
    "\002\000\012\025\050\047\043\050\045\051\051\001\002" +
    "\000\066\002\uffd8\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010" +
    "\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8" +
    "\017\uffd8\020\uffd8\021\uffd8\023\uffd8\024\uffd8\026\uffd8\027" +
    "\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8" +
    "\051\uffd8\001\002\000\010\026\066\032\054\033\055\001" +
    "\002\000\066\002\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7" +
    "\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016" +
    "\uffd7\017\uffd7\020\uffd7\021\uffd7\023\uffd7\024\uffd7\026\uffd7" +
    "\027\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036" +
    "\uffd7\051\uffd7\001\002\000\066\002\uffdd\004\uffdd\005\uffdd" +
    "\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014" +
    "\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\023\uffdd" +
    "\024\uffdd\026\uffdd\027\uffdd\031\uffdd\032\uffdd\033\uffdd\034" +
    "\060\035\061\036\057\051\uffdd\001\002\000\066\002\uffd9" +
    "\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012" +
    "\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9" +
    "\021\uffd9\023\uffd9\024\uffd9\026\uffd9\027\uffd9\031\uffd9\032" +
    "\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\051\uffd9\001\002" +
    "\000\012\025\050\047\043\050\045\051\051\001\002\000" +
    "\066\002\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6" +
    "\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017" +
    "\uffd6\020\uffd6\021\uffd6\023\uffd6\024\uffd6\026\uffd6\027\uffd6" +
    "\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\051" +
    "\uffd6\001\002\000\010\026\053\032\054\033\055\001\002" +
    "\000\066\002\uffd5\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010" +
    "\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5" +
    "\017\uffd5\020\uffd5\021\uffd5\023\uffd5\024\uffd5\026\uffd5\027" +
    "\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5" +
    "\051\uffd5\001\002\000\012\025\050\047\043\050\045\051" +
    "\051\001\002\000\012\025\050\047\043\050\045\051\051" +
    "\001\002\000\066\002\uffde\004\uffde\005\uffde\006\uffde\007" +
    "\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde" +
    "\016\uffde\017\uffde\020\uffde\021\uffde\023\uffde\024\uffde\026" +
    "\uffde\027\uffde\031\uffde\032\uffde\033\uffde\034\060\035\061" +
    "\036\057\051\uffde\001\002\000\012\025\050\047\043\050" +
    "\045\051\051\001\002\000\012\025\050\047\043\050\045" +
    "\051\051\001\002\000\012\025\050\047\043\050\045\051" +
    "\051\001\002\000\066\002\uffdb\004\uffdb\005\uffdb\006\uffdb" +
    "\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015" +
    "\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\023\uffdb\024\uffdb" +
    "\026\uffdb\027\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035" +
    "\uffdb\036\uffdb\051\uffdb\001\002\000\066\002\uffdc\004\uffdc" +
    "\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013" +
    "\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc" +
    "\023\uffdc\024\uffdc\026\uffdc\027\uffdc\031\uffdc\032\uffdc\033" +
    "\uffdc\034\uffdc\035\uffdc\036\uffdc\051\uffdc\001\002\000\066" +
    "\002\uffda\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda\011" +
    "\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda" +
    "\020\uffda\021\uffda\023\uffda\024\uffda\026\uffda\027\uffda\031" +
    "\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\051\uffda" +
    "\001\002\000\066\002\uffdf\004\uffdf\005\uffdf\006\uffdf\007" +
    "\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf" +
    "\016\uffdf\017\uffdf\020\uffdf\021\uffdf\023\uffdf\024\uffdf\026" +
    "\uffdf\027\uffdf\031\uffdf\032\uffdf\033\uffdf\034\060\035\061" +
    "\036\057\051\uffdf\001\002\000\044\002\uffd0\004\uffd0\005" +
    "\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0" +
    "\014\uffd0\015\uffd0\016\uffd0\020\uffd0\021\uffd0\023\uffd0\024" +
    "\uffd0\051\uffd0\001\002\000\036\002\uffff\004\uffff\005\uffff" +
    "\006\uffff\007\uffff\010\uffff\011\uffff\012\uffff\015\uffff\016" +
    "\uffff\020\uffff\021\uffff\023\uffff\024\uffff\001\002\000\042" +
    "\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012" +
    "\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\020\uffe1\021\uffe1" +
    "\023\uffe1\024\uffe1\051\uffe1\001\002\000\004\013\103\001" +
    "\002\000\042\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0" +
    "\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\020" +
    "\uffe0\021\uffe0\023\uffe0\024\uffe0\051\uffe0\001\002\000\042" +
    "\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012" +
    "\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\020\uffe3\021\uffe3" +
    "\023\uffe3\024\uffe3\051\uffe3\001\002\000\042\004\022\005" +
    "\041\006\020\007\024\010\007\011\010\012\037\013\uffec" +
    "\014\075\015\021\016\027\020\030\021\006\023\004\024" +
    "\023\051\072\001\002\000\004\025\077\001\002\000\042" +
    "\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012" +
    "\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\020\uffe2\021\uffe2" +
    "\023\uffe2\024\uffe2\051\uffe2\001\002\000\012\025\050\047" +
    "\043\050\045\051\051\001\002\000\010\026\101\032\054" +
    "\033\055\001\002\000\042\004\uffd4\005\uffd4\006\uffd4\007" +
    "\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4" +
    "\016\uffd4\020\uffd4\021\uffd4\023\uffd4\024\uffd4\051\uffd4\001" +
    "\002\000\004\013\uffed\001\002\000\046\002\uffee\004\uffee" +
    "\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013" +
    "\uffee\014\uffee\015\uffee\016\uffee\020\uffee\021\uffee\022\uffee" +
    "\023\uffee\024\uffee\051\uffee\001\002\000\004\022\105\001" +
    "\002\000\044\002\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5" +
    "\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016" +
    "\ufff5\020\ufff5\021\ufff5\023\ufff5\024\ufff5\051\ufff5\001\002" +
    "\000\044\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010" +
    "\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa" +
    "\020\ufffa\021\ufffa\023\ufffa\024\ufffa\051\ufffa\001\002\000" +
    "\004\012\037\001\002\000\044\002\uffef\004\uffef\005\uffef" +
    "\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef\014" +
    "\uffef\015\uffef\016\uffef\020\uffef\021\uffef\023\uffef\024\uffef" +
    "\051\uffef\001\002\000\010\017\ufff3\032\054\033\055\001" +
    "\002\000\012\025\050\047\043\050\045\051\051\001\002" +
    "\000\010\026\114\032\054\033\055\001\002\000\044\002" +
    "\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2" +
    "\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\020\uffd2\021" +
    "\uffd2\023\uffd2\024\uffd2\051\uffd2\001\002\000\004\026\116" +
    "\001\002\000\044\002\uffcf\004\uffcf\005\uffcf\006\uffcf\007" +
    "\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf" +
    "\016\uffcf\020\uffcf\021\uffcf\023\uffcf\024\uffcf\051\uffcf\001" +
    "\002\000\012\025\050\047\043\050\045\051\051\001\002" +
    "\000\010\026\121\032\054\033\055\001\002\000\044\002" +
    "\uffd1\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1" +
    "\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\020\uffd1\021" +
    "\uffd1\023\uffd1\024\uffd1\051\uffd1\001\002\000\012\025\050" +
    "\047\043\050\045\051\051\001\002\000\044\002\ufff1\004" +
    "\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1" +
    "\013\ufff1\014\ufff1\015\ufff1\016\ufff1\020\ufff1\021\ufff1\023" +
    "\ufff1\024\ufff1\051\ufff1\001\002\000\010\027\125\032\054" +
    "\033\055\001\002\000\012\025\050\047\043\050\045\051" +
    "\051\001\002\000\010\031\127\032\054\033\055\001\002" +
    "\000\004\051\130\001\002\000\044\002\ufff2\004\ufff2\005" +
    "\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2" +
    "\014\ufff2\015\ufff2\016\ufff2\020\ufff2\021\ufff2\023\ufff2\024" +
    "\ufff2\051\ufff2\001\002\000\012\025\050\047\043\050\045" +
    "\051\051\001\002\000\010\026\133\032\054\033\055\001" +
    "\002\000\044\002\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3" +
    "\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016" +
    "\uffd3\020\uffd3\021\uffd3\023\uffd3\024\uffd3\051\uffd3\001\002" +
    "\000\004\017\136\001\002\000\044\002\ufff7\004\ufff7\005" +
    "\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7" +
    "\014\ufff7\015\ufff7\016\ufff7\020\ufff7\021\ufff7\023\ufff7\024" +
    "\ufff7\051\ufff7\001\002\000\012\025\050\047\043\050\045" +
    "\051\051\001\002\000\050\002\ufff0\004\ufff0\005\ufff0\006" +
    "\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0" +
    "\015\ufff0\016\ufff0\020\ufff0\021\ufff0\023\ufff0\024\ufff0\032" +
    "\054\033\055\051\ufff0\001\002\000\004\002\000\001\002" +
    "\000\004\026\142\001\002\000\044\002\uffcc\004\uffcc\005" +
    "\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc" +
    "\014\uffcc\015\uffcc\016\uffcc\020\uffcc\021\uffcc\023\uffcc\024" +
    "\uffcc\051\uffcc\001\002\000\004\026\144\001\002\000\044" +
    "\002\uffcd\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011" +
    "\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\020\uffcd" +
    "\021\uffcd\023\uffcd\024\uffcd\051\uffcd\001\002\000\004\026" +
    "\146\001\002\000\044\002\uffce\004\uffce\005\uffce\006\uffce" +
    "\007\uffce\010\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015" +
    "\uffce\016\uffce\020\uffce\021\uffce\023\uffce\024\uffce\051\uffce" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\044\002\014\003\037\004\035\005\010\006" +
    "\033\015\034\016\030\020\015\023\011\024\004\025\024" +
    "\026\013\027\012\030\032\031\025\032\016\033\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\110\012\045\013\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\103\001\001\000\002" +
    "\001\001\000\050\004\075\005\010\006\033\007\070\010" +
    "\073\014\067\015\034\016\030\020\015\022\072\023\011" +
    "\024\004\025\024\026\013\027\012\030\032\031\025\032" +
    "\016\033\031\001\001\000\040\004\066\005\010\006\033" +
    "\015\034\016\030\020\015\023\011\024\004\025\024\026" +
    "\013\027\012\030\032\031\025\032\016\033\031\001\001" +
    "\000\002\001\001\000\010\011\043\012\045\013\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\011\051\012" +
    "\045\013\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\064\013\046\001\001\000" +
    "\006\012\055\013\046\001\001\000\002\001\001\000\004" +
    "\013\063\001\001\000\004\013\062\001\001\000\004\013" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\004\075\005\010\006\033\007" +
    "\101\010\073\014\067\015\034\016\030\020\015\022\072" +
    "\023\011\024\004\025\024\026\013\027\012\030\032\031" +
    "\025\032\016\033\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\077\012\045\013\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\011\112\012\045\013\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\011\117\012\045\013\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\123" +
    "\012\045\013\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\125\012\045\013\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\131\012\045\013\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\134\001\001\000\002\001\001\000" +
    "\010\011\136\012\045\013\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$FractalParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$FractalParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$FractalParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    try {
        return lexer.next_token();
    } catch (java.io.IOException ioe) {
        System.out.println ("Unrecognised token");
        System.out.println(ioe.getMessage());
        throw ioe;
    }

    }


    FractalLexer lexer;
 
    public FractalParser(FractalLexer l) {
        // As of CUP v0.11, need to pass Lexer to superclass
        super(l);
        lexer = l;
    }
 
    public void report_error(String message, Object info) {
        System.err.println(message);
    }
 
    public void syntax_error(Symbol cur_token) {
        System.err.print("Line " + lexer.getLine() +
             " near char " + lexer.getChar() + ": ");
        report_error("Syntax error", cur_token);
        System.err.println ("Last token read is '" +
           lexer.getText() + "'");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$FractalParser$actions {
  private final FractalParser parser;

  /** Constructor */
  CUP$FractalParser$actions(FractalParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$FractalParser$do_action(
    int                        CUP$FractalParser$act_num,
    java_cup.runtime.lr_parser CUP$FractalParser$parser,
    java.util.Stack            CUP$FractalParser$stack,
    int                        CUP$FractalParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$FractalParser$result;

      /* select the action based on the action number */
      switch (CUP$FractalParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // clearCmd ::= CLEAR LPAREN RPAREN 
            {
              ASTTCmdClear RESULT =null;
		 RESULT = new ASTTCmdClear(); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("clearCmd",25, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // homeCmd ::= HOME LPAREN RPAREN 
            {
              ASTTCmdHome RESULT =null;
		 RESULT = new ASTTCmdHome(); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("homeCmd",22, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // penupCmd ::= PENUP LPAREN RPAREN 
            {
              ASTTCmdPenUp RESULT =null;
		 RESULT = new ASTTCmdPenUp(); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("penupCmd",21, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // pendownCmd ::= PENDOWN LPAREN RPAREN 
            {
              ASTTCmdPenDown RESULT =null;
		 RESULT = new ASTTCmdPenDown(); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("pendownCmd",20, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // backCmd ::= BACK LPAREN arithExp RPAREN 
            {
              ASTTCmdBack RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		 RESULT = new ASTTCmdBack(e); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("backCmd",23, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-3)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // forwardCmd ::= FORWARD LPAREN arithExp RPAREN 
            {
              ASTTCmdForward RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		 RESULT = new ASTTCmdForward(e); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("forwardCmd",24, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-3)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // leftCmd ::= LEFT LPAREN arithExp RPAREN 
            {
              ASTTCmdLeft RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		 RESULT = new ASTTCmdLeft(e); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("leftCmd",18, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-3)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // rightCmd ::= RIGHT LPAREN arithExp RPAREN 
            {
              ASTTCmdRight RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		 RESULT = new ASTTCmdRight(e); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("rightCmd",17, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-3)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // self ::= SELF LPAREN arithExp RPAREN 
            {
              ASTSelf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		 RESULT = new ASTSelf(e); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("self",16, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-3)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // factor ::= LPAREN arithExp RPAREN 
            {
              ASTExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		 RESULT = e; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // factor ::= VARIABLE 
            {
              ASTExp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTExpVar(var); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // factor ::= REAL 
            {
              ASTExp RESULT =null;
		int rlitleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int rlitright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		Double rlit = (Double)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTExpLit(FractalValue.make(rlit)); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // factor ::= INTEGER 
            {
              ASTExp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTExpLit(FractalValue.make(ilit)); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // term ::= factor 
            {
              ASTExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp f = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = f; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // term ::= term MOD factor 
            {
              ASTExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		ASTExp t = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp f = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTExpMod(t, f); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // term ::= term DIV factor 
            {
              ASTExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		ASTExp t = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp f = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTExpDiv(t, f); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // term ::= term MUL factor 
            {
              ASTExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		ASTExp t = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp f = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTExpMul(t, f); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // arithExp ::= term 
            {
              ASTExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp t = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = t; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("arithExp",7, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // arithExp ::= arithExp MINUS term 
            {
              ASTExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp t = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTExpSub(e, t); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("arithExp",7, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // arithExp ::= arithExp PLUS term 
            {
              ASTExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp t = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTExpAdd(e, t); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("arithExp",7, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // fracVar ::= VARIABLE 
            {
              ASTFracVar RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTFracVar(v); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("fracVar",10, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // fracExp ::= fracVar 
            {
              ASTStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTFracVar f = (ASTFracVar)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = f; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("fracExp",6, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // fracExp ::= stmt 
            {
              ASTStatement RESULT =null;
		int smleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int smright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTStatement sm = (ASTStatement)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = sm; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("fracExp",6, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // fracExp ::= self 
            {
              ASTStatement RESULT =null;
		int sfleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int sfright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTSelf sf = (ASTSelf)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = sf; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("fracExp",6, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // turtleCmd ::= leftCmd 
            {
              ASTTurtleCmd RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTTCmdLeft l = (ASTTCmdLeft)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("turtleCmd",4, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // turtleCmd ::= rightCmd 
            {
              ASTTurtleCmd RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTTCmdRight r = (ASTTCmdRight)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = r; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("turtleCmd",4, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // turtleCmd ::= pendownCmd 
            {
              ASTTurtleCmd RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTTCmdPenDown pd = (ASTTCmdPenDown)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = pd; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("turtleCmd",4, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // turtleCmd ::= penupCmd 
            {
              ASTTurtleCmd RESULT =null;
		int puleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int puright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTTCmdPenUp pu = (ASTTCmdPenUp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = pu; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("turtleCmd",4, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // turtleCmd ::= backCmd 
            {
              ASTTurtleCmd RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTTCmdBack b = (ASTTCmdBack)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = b; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("turtleCmd",4, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // turtleCmd ::= forwardCmd 
            {
              ASTTurtleCmd RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTTCmdForward f = (ASTTCmdForward)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = f; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("turtleCmd",4, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // turtleCmd ::= homeCmd 
            {
              ASTTurtleCmd RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTTCmdHome h = (ASTTCmdHome)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = h; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("turtleCmd",4, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // turtleCmd ::= clearCmd 
            {
              ASTTurtleCmd RESULT =null;
		int cCmdleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int cCmdright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTTCmdClear cCmd = (ASTTCmdClear)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = cCmd; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("turtleCmd",4, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // fracBody ::= fracExp 
            {
              ArrayList<ASTStatement> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTStatement f = (ASTStatement)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 
                 ArrayList<ASTStatement> body = new ArrayList<ASTStatement>();
                 body.add(f);
                 RESULT = body;
             
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("fracBody",5, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // fracBody ::= fracExp fracBody 
            {
              ArrayList<ASTStatement> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		ASTStatement f = (ASTStatement)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ArrayList<ASTStatement> b = (ArrayList<ASTStatement>)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		
                 b.add(f);
                 RESULT = b;
             
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("fracBody",5, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // fractal ::= FRACTAL fracBody END 
            {
              ASTFractal RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		ArrayList<ASTStatement> b = (ArrayList<ASTStatement>)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		 RESULT = new ASTFractal(b); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("fractal",11, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // definition ::= DEF VARIABLE fractal 
            {
              ASTDefine RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTFractal f = (ASTFractal)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTDefine(v, f); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // scaleStmt ::= SCALE arithExp 
            {
              ASTSetScale RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTSetScale(e); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("scaleStmt",15, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // renderStmt ::= RENDER VARIABLE 
            {
              ASTRender RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTRender(new ASTFracVar(v)); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("renderStmt",19, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // renderStmt ::= RENDER LBRACE arithExp COMMA arithExp RBRACE VARIABLE 
            {
              ASTRender RESULT =null;
		int lvlleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-4)).left;
		int lvlright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-4)).right;
		ASTExp lvl = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-4)).value;
		int lenleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int lenright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		ASTExp len = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		
                  RESULT = new ASTRender(lvl, len, new ASTFracVar(v)); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("renderStmt",19, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-6)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // levelStmt ::= LEVEL arithExp 
            {
              ASTSetLevel RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTSetLevel(e); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("levelStmt",14, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // saveStmt ::= SAVE 
            {
              ASTSaveStmt RESULT =null;
		 RESULT = new ASTSaveStmt(); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("saveStmt",12, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // restoreStmt ::= RESTORE 
            {
              ASTRestoreStmt RESULT =null;
		 RESULT = new ASTRestoreStmt(); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("restoreStmt",13, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= renderStmt 
            {
              ASTStatement RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTRender rs = (ASTRender)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = rs; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= levelStmt NT$1 scaleStmt 
            {
              ASTStatement RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (ASTStatement) ((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		ASTSetLevel ls = (ASTSetLevel)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTSetScale ss = (ASTSetScale)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = ss; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$1 ::= 
            {
              ASTStatement RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTSetLevel ls = (ASTSetLevel)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
 RESULT = ls; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("NT$1",27, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= saveStmt 
            {
              ASTStatement RESULT =null;
		int svleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int svright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTSaveStmt sv = (ASTSaveStmt)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = sv; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= fractal NT$0 restoreStmt 
            {
              ASTStatement RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (ASTStatement) ((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		int frleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int frright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		ASTFractal fr = (ASTFractal)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int rstleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int rstright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTRestoreStmt rst = (ASTRestoreStmt)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = rst; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$0 ::= 
            {
              ASTStatement RESULT =null;
		int frleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int frright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTFractal fr = (ASTFractal)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
 RESULT = fr; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("NT$0",26, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= turtleCmd 
            {
              ASTStatement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTTurtleCmd t = (ASTTurtleCmd)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = t; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= definition 
            {
              ASTStatement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTDefine d = (ASTDefine)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = d; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              ASTStmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTStatement s = (ASTStatement)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTStmtSequence(s); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              ASTStmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		ASTStmtSequence lst = (ASTStmtSequence)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTStatement s = (ASTStatement)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		
                 lst.add(s); 
                 RESULT = lst;
             
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		ASTProgram start_val = (ASTProgram)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		RESULT = start_val;
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$FractalParser$parser.done_parsing();
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              ASTProgram RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTStmtSequence s = (ASTStmtSequence)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTProgram(s); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

