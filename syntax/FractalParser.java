
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Nov 17 14:13:28 EST 2013
//----------------------------------------------------

package fractal.syntax;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import fractal.values.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Nov 17 14:13:28 EST 2013
  */
public class FractalParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public FractalParser() {super();}

  /** Constructor which sets the default scanner. */
  public FractalParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public FractalParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\053\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\005\005\000\002\014\005\000\002\006\004\000" +
    "\002\006\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\013\003\000" +
    "\002\010\005\000\002\010\005\000\002\010\003\000\002" +
    "\011\005\000\002\011\005\000\002\011\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\005" +
    "\000\002\017\006\000\002\022\006\000\002\023\006\000" +
    "\002\031\006\000\002\030\006\000\002\025\005\000\002" +
    "\026\005\000\002\027\005\000\002\032\005\000\002\024" +
    "\011\000\002\024\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\032\004\022\005\037\006\021\007\024\010" +
    "\006\011\010\014\034\015\020\020\027\023\004\024\023" +
    "\050\014\001\002\000\004\025\125\001\002\000\036\002" +
    "\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0" +
    "\013\ufff0\014\ufff0\015\ufff0\020\ufff0\023\ufff0\024\ufff0\050" +
    "\ufff0\001\002\000\004\025\123\001\002\000\036\002\uffee" +
    "\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee\013" +
    "\uffee\014\uffee\015\uffee\020\uffee\023\uffee\024\uffee\050\uffee" +
    "\001\002\000\004\025\121\001\002\000\034\002\ufffd\004" +
    "\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\014\ufffd" +
    "\015\ufffd\020\ufffd\023\ufffd\024\ufffd\050\ufffd\001\002\000" +
    "\036\002\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1" +
    "\011\ufff1\013\ufff1\014\ufff1\015\ufff1\020\ufff1\023\ufff1\024" +
    "\ufff1\050\ufff1\001\002\000\036\002\ufff3\004\ufff3\005\ufff3" +
    "\006\ufff3\007\ufff3\010\ufff3\011\ufff3\013\ufff3\014\ufff3\015" +
    "\ufff3\020\ufff3\023\ufff3\024\ufff3\050\ufff3\001\002\000\036" +
    "\002\uffec\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011" +
    "\uffec\013\uffec\014\uffec\015\uffec\020\uffec\023\uffec\024\uffec" +
    "\050\uffec\001\002\000\036\002\ufff2\004\ufff2\005\ufff2\006" +
    "\ufff2\007\ufff2\010\ufff2\011\ufff2\013\ufff2\014\ufff2\015\ufff2" +
    "\020\ufff2\023\ufff2\024\ufff2\050\ufff2\001\002\000\004\002" +
    "\120\001\002\000\036\002\ufff5\004\ufff5\005\ufff5\006\ufff5" +
    "\007\ufff5\010\ufff5\011\ufff5\013\ufff5\014\ufff5\015\ufff5\020" +
    "\ufff5\023\ufff5\024\ufff5\050\ufff5\001\002\000\006\030\111" +
    "\050\014\001\002\000\004\025\106\001\002\000\004\025" +
    "\103\001\002\000\004\025\101\001\002\000\004\025\076" +
    "\001\002\000\036\002\uffef\004\uffef\005\uffef\006\uffef\007" +
    "\uffef\010\uffef\011\uffef\013\uffef\014\uffef\015\uffef\020\uffef" +
    "\023\uffef\024\uffef\050\uffef\001\002\000\036\002\ufff4\004" +
    "\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\013\ufff4" +
    "\014\ufff4\015\ufff4\020\ufff4\023\ufff4\024\ufff4\050\ufff4\001" +
    "\002\000\004\050\067\001\002\000\034\002\ufffc\004\ufffc" +
    "\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\014\ufffc\015" +
    "\ufffc\020\ufffc\023\ufffc\024\ufffc\050\ufffc\001\002\000\036" +
    "\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011" +
    "\ufff7\013\ufff7\014\ufff7\015\ufff7\020\ufff7\023\ufff7\024\ufff7" +
    "\050\ufff7\001\002\000\036\002\ufff6\004\ufff6\005\ufff6\006" +
    "\ufff6\007\ufff6\010\ufff6\011\ufff6\013\ufff6\014\ufff6\015\ufff6" +
    "\020\ufff6\023\ufff6\024\ufff6\050\ufff6\001\002\000\036\002" +
    "\uffed\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed" +
    "\013\uffed\014\uffed\015\uffed\020\uffed\023\uffed\024\uffed\050" +
    "\uffed\001\002\000\004\025\064\001\002\000\034\002\ufffe" +
    "\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\014" +
    "\ufffe\015\ufffe\020\ufffe\023\ufffe\024\ufffe\050\ufffe\001\002" +
    "\000\034\002\001\004\022\005\037\006\021\007\024\010" +
    "\006\011\010\014\034\015\020\020\027\023\004\024\023" +
    "\050\014\001\002\000\004\025\040\001\002\000\012\025" +
    "\046\046\042\047\043\050\047\001\002\000\010\026\062" +
    "\032\052\033\053\001\002\000\020\026\uffe5\027\uffe5\031" +
    "\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\001\002\000\020" +
    "\026\uffe4\027\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035" +
    "\uffe4\001\002\000\020\026\uffe6\027\uffe6\031\uffe6\032\uffe6" +
    "\033\uffe6\034\uffe6\035\uffe6\001\002\000\020\026\uffe9\027" +
    "\uffe9\031\uffe9\032\uffe9\033\uffe9\034\055\035\056\001\002" +
    "\000\012\025\046\046\042\047\043\050\047\001\002\000" +
    "\020\026\uffe3\027\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3" +
    "\035\uffe3\001\002\000\010\026\051\032\052\033\053\001" +
    "\002\000\020\026\uffe2\027\uffe2\031\uffe2\032\uffe2\033\uffe2" +
    "\034\uffe2\035\uffe2\001\002\000\012\025\046\046\042\047" +
    "\043\050\047\001\002\000\012\025\046\046\042\047\043" +
    "\050\047\001\002\000\020\026\uffea\027\uffea\031\uffea\032" +
    "\uffea\033\uffea\034\055\035\056\001\002\000\012\025\046" +
    "\046\042\047\043\050\047\001\002\000\012\025\046\046" +
    "\042\047\043\050\047\001\002\000\020\026\uffe7\027\uffe7" +
    "\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\001\002\000" +
    "\020\026\uffe8\027\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8" +
    "\035\uffe8\001\002\000\020\026\uffeb\027\uffeb\031\uffeb\032" +
    "\uffeb\033\uffeb\034\055\035\056\001\002\000\036\002\uffdd" +
    "\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\013" +
    "\uffdd\014\uffdd\015\uffdd\020\uffdd\023\uffdd\024\uffdd\050\uffdd" +
    "\001\002\000\034\002\uffff\004\uffff\005\uffff\006\uffff\007" +
    "\uffff\010\uffff\011\uffff\014\uffff\015\uffff\020\uffff\023\uffff" +
    "\024\uffff\050\uffff\001\002\000\012\025\046\046\042\047" +
    "\043\050\047\001\002\000\010\026\066\032\052\033\053" +
    "\001\002\000\036\002\uffe1\004\uffe1\005\uffe1\006\uffe1\007" +
    "\uffe1\010\uffe1\011\uffe1\013\uffe1\014\uffe1\015\uffe1\020\uffe1" +
    "\023\uffe1\024\uffe1\050\uffe1\001\002\000\004\012\070\001" +
    "\002\000\030\004\022\005\037\006\021\007\024\010\006" +
    "\011\010\014\034\015\020\023\004\024\023\050\014\001" +
    "\002\000\034\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb" +
    "\010\ufffb\011\ufffb\014\ufffb\015\ufffb\020\ufffb\023\ufffb\024" +
    "\ufffb\050\ufffb\001\002\000\004\013\075\001\002\000\032" +
    "\004\022\005\037\006\021\007\024\010\006\011\010\013" +
    "\ufff8\014\034\015\020\023\004\024\023\050\014\001\002" +
    "\000\004\013\ufff9\001\002\000\034\002\ufffa\004\ufffa\005" +
    "\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\014\ufffa\015\ufffa" +
    "\020\ufffa\023\ufffa\024\ufffa\050\ufffa\001\002\000\012\025" +
    "\046\046\042\047\043\050\047\001\002\000\010\026\100" +
    "\032\052\033\053\001\002\000\036\002\uffdf\004\uffdf\005" +
    "\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\013\uffdf\014\uffdf" +
    "\015\uffdf\020\uffdf\023\uffdf\024\uffdf\050\uffdf\001\002\000" +
    "\004\026\102\001\002\000\036\002\uffdc\004\uffdc\005\uffdc" +
    "\006\uffdc\007\uffdc\010\uffdc\011\uffdc\013\uffdc\014\uffdc\015" +
    "\uffdc\020\uffdc\023\uffdc\024\uffdc\050\uffdc\001\002\000\012" +
    "\025\046\046\042\047\043\050\047\001\002\000\010\026" +
    "\105\032\052\033\053\001\002\000\036\002\uffde\004\uffde" +
    "\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde\013\uffde\014" +
    "\uffde\015\uffde\020\uffde\023\uffde\024\uffde\050\uffde\001\002" +
    "\000\012\025\046\046\042\047\043\050\047\001\002\000" +
    "\010\026\110\032\052\033\053\001\002\000\036\002\uffe0" +
    "\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\013" +
    "\uffe0\014\uffe0\015\uffe0\020\uffe0\023\uffe0\024\uffe0\050\uffe0" +
    "\001\002\000\012\025\046\046\042\047\043\050\047\001" +
    "\002\000\036\002\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7" +
    "\010\uffd7\011\uffd7\013\uffd7\014\uffd7\015\uffd7\020\uffd7\023" +
    "\uffd7\024\uffd7\050\uffd7\001\002\000\010\027\114\032\052" +
    "\033\053\001\002\000\012\025\046\046\042\047\043\050" +
    "\047\001\002\000\010\031\116\032\052\033\053\001\002" +
    "\000\004\050\014\001\002\000\036\002\uffd8\004\uffd8\005" +
    "\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\013\uffd8\014\uffd8" +
    "\015\uffd8\020\uffd8\023\uffd8\024\uffd8\050\uffd8\001\002\000" +
    "\004\002\000\001\002\000\004\026\122\001\002\000\036" +
    "\002\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011" +
    "\uffd9\013\uffd9\014\uffd9\015\uffd9\020\uffd9\023\uffd9\024\uffd9" +
    "\050\uffd9\001\002\000\004\026\124\001\002\000\036\002" +
    "\uffda\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda" +
    "\013\uffda\014\uffda\015\uffda\020\uffda\023\uffda\024\uffda\050" +
    "\uffda\001\002\000\004\026\126\001\002\000\036\002\uffdb" +
    "\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\013" +
    "\uffdb\014\uffdb\015\uffdb\020\uffdb\023\uffdb\024\uffdb\050\uffdb" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\042\002\015\003\035\004\034\005\010\007" +
    "\027\013\006\017\024\022\011\023\004\024\032\025\014" +
    "\026\012\027\031\030\025\031\016\032\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\004\062\005\010\007\027\013\006\017\024" +
    "\022\011\023\004\024\032\025\014\026\012\027\031\030" +
    "\025\031\016\032\030\001\001\000\002\001\001\000\010" +
    "\010\040\011\044\012\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\047\011\044\012\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\060\012\043\001\001\000\006\011\053\012\043\001" +
    "\001\000\002\001\001\000\004\012\057\001\001\000\004" +
    "\012\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\064\011\044\012\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\070\001\001\000\034\006\071" +
    "\007\072\013\006\017\024\022\011\023\004\024\032\025" +
    "\014\026\012\027\031\030\025\031\016\032\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\006\073\007" +
    "\072\013\006\017\024\022\011\023\004\024\032\025\014" +
    "\026\012\027\031\030\025\031\016\032\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\076\011\044" +
    "\012\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\103\011\044" +
    "\012\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\106\011\044\012\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\112\011\044\012\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\114" +
    "\011\044\012\043\001\001\000\002\001\001\000\004\013" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$FractalParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$FractalParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$FractalParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    try {
        return lexer.next_token();
    } catch (java.io.IOException ioe) {
        System.out.println ("Unrecognised token");
        System.out.println(ioe.getMessage());
        throw ioe;
    }

    }


    FractalLexer lexer;
 
    public FractalParser(FractalLexer l) {
        // As of CUP v0.11, need to pass Lexer to superclass
        super(l);
        lexer = l;
    }
 
    public void report_error(String message, Object info) {
        System.err.println(message);
    }
 
    public void syntax_error(Symbol cur_token) {
        System.err.print("Line " + lexer.getLine() +
             " near char " + lexer.getChar() + ": ");
        report_error("Syntax error", cur_token);
        System.err.println ("Last token read is '" +
           lexer.getText() + "'");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$FractalParser$actions {
  private final FractalParser parser;

  /** Constructor */
  CUP$FractalParser$actions(FractalParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$FractalParser$do_action(
    int                        CUP$FractalParser$act_num,
    java_cup.runtime.lr_parser CUP$FractalParser$parser,
    java.util.Stack            CUP$FractalParser$stack,
    int                        CUP$FractalParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$FractalParser$result;

      /* select the action based on the action number */
      switch (CUP$FractalParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // renderCmd ::= RENDER fracVar 
            {
              ASTRender RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTFracVar f = (ASTFracVar)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTRender(f); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("renderCmd",18, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // renderCmd ::= RENDER LBRACE arithExp COMMA arithExp RBRACE fracVar 
            {
              ASTRender RESULT =null;
		int lvlleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-4)).left;
		int lvlright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-4)).right;
		ASTExp lvl = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-4)).value;
		int lenleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int lenright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		ASTExp len = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTFracVar f = (ASTFracVar)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		
                  RESULT = new ASTRender(lvl, len, f); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("renderCmd",18, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-6)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // clearCmd ::= CLEAR LPAREN RPAREN 
            {
              ASTTCmdClear RESULT =null;
		 RESULT = new ASTTCmdClear(); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("clearCmd",24, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // homeCmd ::= HOME LPAREN RPAREN 
            {
              ASTTCmdHome RESULT =null;
		 RESULT = new ASTTCmdHome(); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("homeCmd",21, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // penupCmd ::= PENUP LPAREN RPAREN 
            {
              ASTTCmdPenUp RESULT =null;
		 RESULT = new ASTTCmdPenUp(); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("penupCmd",20, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // pendownCmd ::= PENDOWN LPAREN RPAREN 
            {
              ASTTCmdPenDown RESULT =null;
		 RESULT = new ASTTCmdPenDown(); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("pendownCmd",19, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // backCmd ::= BACK LPAREN arithExp RPAREN 
            {
              ASTTCmdBack RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		 RESULT = new ASTTCmdBack(e); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("backCmd",22, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-3)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // forwardCmd ::= FORWARD LPAREN arithExp RPAREN 
            {
              ASTTCmdForward RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		 RESULT = new ASTTCmdForward(e); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("forwardCmd",23, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-3)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // leftCmd ::= LEFT LPAREN arithExp RPAREN 
            {
              ASTTCmdLeft RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		 RESULT = new ASTTCmdLeft(e); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("leftCmd",17, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-3)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // rightCmd ::= RIGHT LPAREN arithExp RPAREN 
            {
              ASTTCmdRight RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		 RESULT = new ASTTCmdRight(e); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("rightCmd",16, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-3)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // self ::= SELF LPAREN arithExp RPAREN 
            {
              ASTSelf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		 RESULT = new ASTSelf(e); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("self",13, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-3)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // factor ::= LPAREN arithExp RPAREN 
            {
              ASTExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		 RESULT = e; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // factor ::= VARIABLE 
            {
              ASTExp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTExpVar(var); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // factor ::= REAL 
            {
              ASTExp RESULT =null;
		int rlitleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int rlitright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		Double rlit = (Double)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTExpLit(FractalValue.make(rlit)); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // factor ::= INTEGER 
            {
              ASTExp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTExpLit(FractalValue.make(ilit)); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // term ::= factor 
            {
              ASTExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp f = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = f; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // term ::= term DIV factor 
            {
              ASTExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		ASTExp t = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp f = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTExpDiv(t, f); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // term ::= term MUL factor 
            {
              ASTExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		ASTExp t = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp f = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTExpMul(t, f); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // arithExp ::= term 
            {
              ASTExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp t = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = t; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("arithExp",6, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // arithExp ::= arithExp MINUS term 
            {
              ASTExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp t = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTExpSub(e, t); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("arithExp",6, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // arithExp ::= arithExp PLUS term 
            {
              ASTExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).right;
		ASTExp e = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTExp t = (ASTExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTExpAdd(e, t); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("arithExp",6, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // fracVar ::= VARIABLE 
            {
              ASTFracVar RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTFracVar(v); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("fracVar",9, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // fracExp ::= renderCmd 
            {
              ASTFracExp RESULT =null;

              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("fracExp",5, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // fracExp ::= fracVar 
            {
              ASTFracExp RESULT =null;

              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("fracExp",5, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // fracExp ::= self 
            {
              ASTFracExp RESULT =null;

              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("fracExp",5, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // fracExp ::= leftCmd 
            {
              ASTFracExp RESULT =null;

              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("fracExp",5, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // fracExp ::= rightCmd 
            {
              ASTFracExp RESULT =null;

              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("fracExp",5, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // fracExp ::= pendownCmd 
            {
              ASTFracExp RESULT =null;

              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("fracExp",5, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // fracExp ::= penupCmd 
            {
              ASTFracExp RESULT =null;

              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("fracExp",5, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // fracExp ::= backCmd 
            {
              ASTFracExp RESULT =null;

              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("fracExp",5, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // fracExp ::= forwardCmd 
            {
              ASTFracExp RESULT =null;

              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("fracExp",5, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // fracExp ::= homeCmd 
            {
              ASTFracExp RESULT =null;

              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("fracExp",5, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fracExp ::= clearCmd 
            {
              ASTFracExp RESULT =null;

              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("fracExp",5, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // fracBody ::= fracExp 
            {
              ArrayList<ASTStatement> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTFracExp f = (ASTFracExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 
                 ArrayList<ASTStatement> body = new ArrayList<ASTStatement>();
                 body.add(f);
                 RESULT = body;
             
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("fracBody",4, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // fracBody ::= fracExp fracBody 
            {
              ArrayList<ASTStatement> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		ASTFracExp f = (ASTFracExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ArrayList<ASTStatement> b = (ArrayList<ASTStatement>)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		
                 b.add(f);
                 RESULT = b;
             
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("fracBody",4, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // fractal ::= FRACTAL fracBody END 
            {
              ASTFracExp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		ArrayList<ASTStatement> b = (ArrayList<ASTStatement>)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		 RESULT = new ASTFractal(b); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("fractal",10, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // definition ::= DEF VARIABLE fractal 
            {
              ASTDefine RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTFracExp f = (ASTFracExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTDefine(v, f); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-2)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= fracExp 
            {
              ASTStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTFracExp f = (ASTFracExp)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = f; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= definition 
            {
              ASTStatement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTDefine d = (ASTDefine)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = d; 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              ASTStmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTStatement s = (ASTStatement)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTStmtSequence(s); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              ASTStmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		ASTStmtSequence lst = (ASTStmtSequence)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTStatement s = (ASTStatement)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		
                 lst.add(s); 
                 RESULT = lst;
             
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).right;
		ASTProgram start_val = (ASTProgram)((java_cup.runtime.Symbol) CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)).value;
		RESULT = start_val;
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.elementAt(CUP$FractalParser$top-1)), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$FractalParser$parser.done_parsing();
          return CUP$FractalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              ASTProgram RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()).right;
		ASTStmtSequence s = (ASTStmtSequence)((java_cup.runtime.Symbol) CUP$FractalParser$stack.peek()).value;
		 RESULT = new ASTProgram(s); 
              CUP$FractalParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FractalParser$stack.peek()), RESULT);
            }
          return CUP$FractalParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

